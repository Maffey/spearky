"""vulnerability_scanner.py - scans chosen website for existing vulnerabilities.
-- WORK IN PROGRESS --
"""

from bs4 import BeautifulSoup
import requests
import re
from urllib.parse import urljoin


class Scanner:
    def __init__(self, url, ignored_links=None):
        if ignored_links is None:
            ignored_links = []
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignored_links
        self.scan_report = []
        self.running = True

    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall('href="(.*?)"', response.content.decode(errors="ignore"))

    def crawl(self, url=None):
        if self.running:
            if url is None:
                url = self.target_url

            href_links = self.extract_links_from(url)

            for link in href_links:
                link = urljoin(url, link)

                if "#" in link:
                    link = link.split("#")[0]

                # Check for repeated links and links that lead to external websites.
                if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                    self.target_links.append(link)
                    self.scan_report.append(link)
                    self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)

        soup = BeautifulSoup(response.content.decode(errors="ignore"), features="lxml")
        return soup.find_all("form")

    def submit_form(self, form, form_text_value, url):
        action = form.get("action")
        post_url = urljoin(url, action)
        method = form.get("method")

        inputs_list = form.find_all("input")
        post_data = {}
        for form_input in inputs_list:
            input_name = form_input.get("name")
            input_type = form_input.get("type")
            input_value = form_input.get("value")
            if input_type == "text":
                input_value = form_text_value
            post_data[input_name] = input_value

        # If the form uses get method instead of post, we ensure the correct method is executed.
        if method == "post":
            return self.session.post(post_url, data=post_data)
        else:
            return self.session.get(post_url, params=post_data)

    def test_form_xss(self, form, url):
        # The capital letters are there to avoid being detected by basic filtering.
        xss_test_script = "<sCript>alert('Security Test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content.decode(errors="ignore")

    def test_link_xss(self, url):
        # The capital letters are there to avoid being detected by basic filtering.
        xss_test_script = "<sCript>alert('Security Test')</scriPt>"
        url = url.replace("=", f"={xss_test_script}")
        response = self.session.get(url)
        return xss_test_script in response.content.decode(errors="ignore")

    def run_scanner(self):
        # This method can be expanded with more vulnerability types to discover, i.e. SQL injection.
        if self.running:
            for link in self.target_links:
                forms = self.extract_forms(link)
                for form in forms:
                    self.scan_report.append(f"[+] Testing form in {link}")
                    is_vulnerable_to_xss = self.test_form_xss(form, link)
                    if is_vulnerable_to_xss:
                        self.scan_report.append(
                            f"!!!\n\n[***] XSS discovered in {link} in the following form:\n{form}\n\n!!!")

                # The check below checks if there are GET requests
                # (which are known to have something like '?id=1' in the url).
                if "=" in link:
                    self.scan_report.append(f"[+] Testing {link}")
                    is_vulnerable_to_xss = self.test_link_xss(link)
                    if is_vulnerable_to_xss:
                        self.scan_report.append(f"!!!\n\n[***] XSS discovered in {link}.\n\n!!!")

    def start(self):
        self.crawl()
        self.run_scanner()


# To avoid creating separate file just to run the Scanner class, we put the following if statement.
# This check ensures that the lines below are only executed when this script is run directly (and not imported)
# The code below basically requires you to know where is the logout page,
# where is the login page on the website and the attributes of HTML form. Customization is mandatory.
if __name__ == "__main__":
    target_url = "http://crawler-test.com"
    # target_url = "http://10.0.2.4/dvwa/"
    links_to_ignore = ["http://10.0.2.4/dvwa/logout.php"]

    # TODO: Implement logging in.
    login_url = "http://10.0.2.4/dvwa/login.php"
    login_data = {"username": "admin", "password": "password", "Login": "submit"}

    vulnerability_scanner = Scanner(target_url, links_to_ignore)
    # The line below logs the user in, allowing for more links to be crawled.
    # vulnerability_scanner.session.post(login_url, data=login_data)
    # Gathers links first and tests them.
    vulnerability_scanner.start()
